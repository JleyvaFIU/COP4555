4.

TESTING: 
 
twice successor 0                 = 2
twice twice successor 0           = 4
twice twice twice successor 0     = 16
twice twice twice twice successor = 65536

2  = 2^1     -> POWER: 2^0
4  = 2^2     -> POWER: 2^1
16 = 2^4     -> POWER: 2^2
65536 = 2^16 -> POWER: 2^4

6. 

let rec evaluate = function
| Num n -> Some n
| Neg e -> match evaluate e with
	   | Some x -> Some(-x)
	   | _ -> None
| Sum (e1,e2) -> match evaluate(e1, e2) with
	   | (Some x, Some y) -> Some(x+y)
	   | _ -> None
| Diff (e1,e2) -> match evaluate(e1, e2) with
	   | (Some x, Some y) -> Some(x-y)
	   | _ -> None
| Prod (e1,e2) -> match evaluate(e1, e2) with
	   | (Some x, Some y) -> Some(x*y)
	   | _ -> None
| Quot (e1,e2) -> match evaluate(e1, e2) with 
	   | (Some x, Some y) -> if y = 0 then None else Some(x/y)
	   | _ -> None
